library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){}
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
for(y_lab_selection in data_types){}
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
current_state
history_data_point_count <- sample(1:5,1)
history<-vector()
history
history_data_point_count
for(i in 1:history_data_point_count){}
colnames(means_data)
colnames(means_data)%in%current_age_character
which(colnames(means_data)%in%current_age_character)
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:t1,1)
history_data_point_count
history_data_point_count <- sample(1:t1,1)
history_data_point_count
history_data_point_count <- sample(1:t1,1)
t1
history_data_point_count
history<-vector()
means_data[y_lab_selection,current_age_character]
current_age_character
t1-i
i
for(i in 1:history_data_point_count){}
t1-i
y_lab_selection
means_data[y_lab_selection,t1-i]
that_age_mean<-means_data[y_lab_selection,t1-i]
mean-current_state
mean
current_state
current_state+mean
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
that_age_sd
/sd
sd
(current_state+mean)*(that_age_sd /sd)
that_age_sd /sd
mean
current_state-mean
(current_state-mean)*(that_age_sd /sd)
historic_age <- colnames(means_data)[i]
historic_age
above_level
above_level<-(current_state-mean)*(that_age_sd /sd)
above_level<-(current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
historic_state
if(is.na(historic_state))break
c(history,paste(historic_age,historic_state,sep="/"))
history<-c(history,paste(historic_age,historic_state,sep="/"))
paste0("historic_",y_lab_selection)
paste(rev(history),collapse=" // ")
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:t1,1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<-(current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
history
paste(rev(history),collapse=" // ")
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
#loop over four types of data
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:t1,1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<-(current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
}
rm(list=ls())
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
for(n in 1:nmax){}
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
}
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:t1,1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<-(current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
y_lab_selection
data_types
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:t1,1)
history<-vector()
history
i
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<-(current_state-mean)*(that_age_sd /sd)
above_level<-(current_state-mean)*(that_age_sd /sd)
current_state
mean
that_age_sd
that_age_sd
means_data
t1-i
history_data_point_count <- sample(1:(t1-1),1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<- (current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
rm(list=)
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
#loop over four types of data
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
history_data_point_count <- sample(1:(t1-1),1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<- (current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
}
t1-i
t1
t1
current_age_character
history_data_point_count <- sample(1:t1,1)
history_data_point_count
current_age_character
t1<-2
t1<-which(colnames(means_data)%in%current_age_character)
t1<-2
if(current_age_character=="9.5")next
history_data_point_count <- sample(1:t1,1)
history_data_point_count
rm(list=)
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
#loop over four types of data
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
if(current_age_character=="9.5")next
history_data_point_count <- sample(1:(t1-1),1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<- (current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
}
rooster
colnames(current_age_character)
colnames(rooster)
rm(list=)
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-1000
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
#loop over four types of data
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
if(current_age_character=="9.5")next
history_data_point_count <- sample(1:(t1-1),1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<- (current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
#get predicted genetic height
# closest_percentile_i<-which.min(abs(t(means_data[current_age_character,pNames])[,1] - rooster[n,"height"]))
# closest_percentile<-names(closest_percentile_i)
# final_height_just_by_percentile<-ageData["17.5",closest_percentile]
# genetic_height_estimate<-signif(rnorm(mean=final_height_just_by_percentile, sd=5,1),4)
# rooster[n,"genetic_height_estimate"] <- genetic_height_estimate
#get SNPs
rooster[n,"ACTN3"]<-sample(c("0/0","0/1","0/1","1/1"),1)
rooster[n,"AGT"] <-sample(c("0/0","0/1","0/1","1/1"),1)
rooster[n,"COL1A1"] <-sample(c("0/0","0/1","0/1","1/1"),1)
}
write.xlsx(rooster,file="bioAge/2016-08-07_simulated_data.xlsx") #n = 10000
rooster
write.xlsx(rooster,file="bio_age/2016-09-27_simulated_data.xlsx") #n = 10000
write.xlsx(rooster,file="R_scripts/bio_age/2016-09-27_simulated_data.xlsx") #n = 10000
rm(list=)
library(openxlsx)
getwd()
means_data<-read.table(file="R_scripts/bio_age/2016-09-08_means.txt",sep="\t",stringsAsFactors=F,row.names=1,header=T)
colnames(means_data)<-sub("^X","",colnames(means_data))
w1<-which(!1:ncol(means_data)%in%grep("\\.5$",colnames(means_data)))
colnames(means_data)[w1]<-paste0(colnames(means_data)[w1],".0")
nmax<-100
set.seed(42)
#get names source and percentile names
names_source <- read.xlsx("R_scripts/bio_age/2016-07-06_random_player_name_source.xlsx")
pNames<-c('0.4th','2nd','9th','25th','50th','75th','91st','92nd','99.6th')
data_types<-grep("_mean_",rownames(means_data),value=T)
rooster <- data.frame(row.names=as.character(1:nmax))
for(n in 1:nmax){
firstName<-sample(sub(" .+$","",names_source[,"Name"]),1)
lastName<-sample(sub("^.+ ","",names_source[,"Name"]),1)
name<-paste(firstName,lastName)
rooster[n,"name"] <- name
#get current age
current_age<-0
while(current_age<9.5 | current_age > 17.5){
current_age <- signif(rnorm(mean=12,sd=2,1),4)
}
current_age_character<-round(current_age*2)/2
if(length(grep("\\.5$",current_age_character))==1){
current_age_character <- as.character(current_age_character)
}else{
current_age_character <- paste0(as.character(current_age_character),".0")
}
rooster[n,"current_age"] <- current_age
rooster[n,"current_age_character"] <- current_age_character
#loop over four types of data
for(y_lab_selection in data_types){
#Get current state
mean<-means_data[y_lab_selection,current_age_character]
sd<-means_data[sub("_mean_","_sd_",y_lab_selection),current_age_character]
current_state<- signif(rnorm(1,mean=mean,sd=sd),3)
rooster[n,y_lab_selection] <- current_state
#get historical data
t1<-which(colnames(means_data)%in%current_age_character)
if(current_age_character=="9.5")next
history_data_point_count <- sample(1:(t1-1),1)
history<-vector()
for(i in 1:history_data_point_count){
historic_age <- colnames(means_data)[i]
that_age_mean<-means_data[y_lab_selection,t1-i]
that_age_sd<-means_data[sub("_mean_","_sd_",y_lab_selection),t1-i]
above_level<- (current_state-mean)*(that_age_sd /sd)
historic_state <- signif(above_level+that_age_mean,4)
if(is.na(historic_state))break
history<-c(history,paste(historic_age,historic_state,sep="/"))
}
rooster[n,paste0("historic_",y_lab_selection)]<-paste(rev(history),collapse=" // ")
}
#get predicted genetic height
# closest_percentile_i<-which.min(abs(t(means_data[current_age_character,pNames])[,1] - rooster[n,"height"]))
# closest_percentile<-names(closest_percentile_i)
# final_height_just_by_percentile<-ageData["17.5",closest_percentile]
# genetic_height_estimate<-signif(rnorm(mean=final_height_just_by_percentile, sd=5,1),4)
# rooster[n,"genetic_height_estimate"] <- genetic_height_estimate
#get SNPs
rooster[n,"ACTN3"]<-sample(c("0/0","0/1","0/1","1/1"),1)
rooster[n,"AGT"] <-sample(c("0/0","0/1","0/1","1/1"),1)
rooster[n,"COL1A1"] <-sample(c("0/0","0/1","0/1","1/1"),1)
}
write.xlsx(rooster,file="R_scripts/bio_age/2016-09-27_simulated_data.xlsx") #n = 10000
